{"version":3,"sources":["pages/start/start.module.scss","components/header/header.module.scss","pages/main/main.module.scss","components/sudoku-board/sudoku-board.module.scss","components/header/header.tsx","components/sudoku-board/sudoku-board.tsx","pages/main/main.tsx","pages/start/start.tsx","utils/game.ts","app.tsx","index.tsx"],"names":["module","exports","Header","onCheckBoard","setLevel","setSize","history","useHistory","className","classes","header","generateButton","onClick","push","checkButton","SudokuBoard","size","empty","board","setBoard","showSolved","solvedBoard","wrapper","length","map","item","y","el","x","isEmpty","find","sudokuCell","value","sudokuMiddleCell","sudokuSmallCell","sudokuInput","emptyCell","type","onChange","e","coords","num","prev","i","j","onChangeNumber","target","disabled","Main","useState","setShowSolved","container","to","levelOptions","label","boardSizeOptions","Start","onCreateTable","level","redirect","setRedirect","text","selectWrapper","selectedOption","select","placeholder","options","startButton","SudokuGame","numberOfCells","box","numberOfFilledCells","this","Math","round","pow","newBoard","generateRandom","solve","fillWithEmpty","arr","randomIndex","random","temp","numToFill","shuffledArr","shuffle","console","log","toString","generateRandomCell","currentNum","validateTable","pos","boxRow","floor","boxCol","App","setGame","Array","fill","undefined","setSolvedBoard","setEmpty","exact","path","sudoku","sqrt","result","play","emptyIndexes","forEach","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.814e48c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"start_container__lw4jJ\",\"startButton\":\"start_startButton__9UK-x\",\"wrapper\":\"start_wrapper__3tCnN\",\"text\":\"start_text__2QU5s\",\"selectWrapper\":\"start_selectWrapper__3wZMG\",\"select\":\"start_select__28CZk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"generateButton\":\"header_generateButton__2Cl_V\",\"checkButton\":\"header_checkButton__3dRwq\",\"header\":\"header_header__3wy06\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"main_container__2trNQ\",\"modalScreen\":\"main_modalScreen__3QPwf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"sudoku-board_wrapper__2OnAG\",\"sudokuCell\":\"sudoku-board_sudokuCell__3OA8N\",\"sudokuSmallCell\":\"sudoku-board_sudokuSmallCell__3FQ4x\",\"sudokuMiddleCell\":\"sudoku-board_sudokuMiddleCell__3tis-\",\"sudokuInput\":\"sudoku-board_sudokuInput__1bpqd\",\"emptyCell\":\"sudoku-board_emptyCell__3taBc\"};","import { Dispatch } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport classes from './header.module.scss';\n\ninterface Props {\n  setLevel: Dispatch<any>;\n  setSize: Dispatch<any>;\n  onCheckBoard: () => void;\n}\n\nconst Header = ({ onCheckBoard, setLevel, setSize }: Props) => {\n  const history = useHistory();\n\n  const onStartNewGame = () => {\n    setLevel(null);\n    setSize(null);\n    history.push('/');\n  };\n\n  return (\n    <div className={classes.header}>\n      <button className={classes.generateButton} onClick={onStartNewGame}>\n        Start new game\n      </button>\n      <button className={classes.checkButton} onClick={onCheckBoard}>\n        Check\n      </button>\n    </div>\n  );\n};\n\nexport default Header;\n","import { ISelectOption } from '../../app';\nimport classes from './sudoku-board.module.scss';\n\ninterface Props {\n  empty: Array<string> | null;\n  board: string[][];\n  size: ISelectOption | null;\n  setBoard: (b: any) => void;\n  showSolved: boolean;\n  solvedBoard: string[][] | null;\n}\n\nconst SudokuBoard = ({\n  size,\n  empty,\n  board,\n  setBoard,\n  showSolved,\n  solvedBoard,\n}: Props) => {\n  const onChangeNumber = (coords: [number, number], num: string) => {\n    const [y, x] = coords;\n    const isEmpty = empty?.find((item) => item === `${y}, ${x}`);\n\n    if (!isEmpty) return;\n\n    setBoard((prev: Array<Array<string>>) => {\n      return prev?.map((item, i) => {\n        return item.map((el, j) => {\n          if (i === y && j === x) {\n            return num;\n          } else {\n            return el;\n          }\n        });\n      });\n    });\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      {!!board?.length && !showSolved ? (\n        <>\n          {board.map((item, y: number) => {\n            return (\n              <div key={y}>\n                {item.map((el: string, x: number) => {\n                  const isEmpty = empty?.find((item) => item === `${y}, ${x}`);\n\n                  return (\n                    <div\n                      key={`${y}${x}`}\n                      className={`${classes.sudokuCell} \n                      ${size?.value === '9' && `${classes.sudokuMiddleCell}`}\n                      ${size?.value === '16' && `${classes.sudokuSmallCell}`}\n                      `}\n                    >\n                      <input\n                        className={\n                          isEmpty\n                            ? `${classes.sudokuInput} ${classes.emptyCell}`\n                            : classes.sudokuInput\n                        }\n                        type='text'\n                        value={board[y][x]}\n                        onChange={(e) => onChangeNumber([y, x], e.target.value)}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </>\n      ) : (\n        <>\n          {solvedBoard?.map((item, y: number) => {\n            return (\n              <div key={y}>\n                {item.map((el: string, x: number) => {\n                  const isEmpty = empty?.find((item) => item === `${y}, ${x}`);\n\n                  return (\n                    <div\n                      key={`${y}${x}`}\n                      className={`${classes.sudokuCell} \n                    ${size?.value === '9' && `${classes.sudokuMiddleCell}`}\n                    ${size?.value === '16' && `${classes.sudokuSmallCell}`}\n                    `}\n                    >\n                      <input\n                        className={\n                          isEmpty\n                            ? `${classes.sudokuInput} ${classes.emptyCell}`\n                            : classes.sudokuInput\n                        }\n                        type='text'\n                        value={solvedBoard[y][x]}\n                        disabled\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </>\n      )}\n      ;\n    </div>\n  );\n};\n\nexport default SudokuBoard;\n","import { Dispatch, SetStateAction, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { ISelectOption } from '../../app';\nimport Header from '../../components/header/header';\nimport SudokuBoard from '../../components/sudoku-board/sudoku-board';\n\nimport classes from './main.module.scss';\n\ninterface Props {\n  board: string[][];\n  solvedBoard: string[][] | null;\n  empty: Array<string> | null;\n  setBoard: Dispatch<SetStateAction<string[][]>>;\n  setLevel: Dispatch<any>;\n  setSize: Dispatch<any>;\n  size: ISelectOption | null;\n}\n\nconst Main = ({\n  board,\n  solvedBoard,\n  empty,\n  setBoard,\n  setLevel,\n  setSize,\n  size,\n}: Props) => {\n  const [showSolved, setShowSolved] = useState(false);\n  const onCheckBoard = () => {\n    setShowSolved(true);\n  };\n\n  if (!solvedBoard) {\n    return <Redirect to='/' />;\n  }\n\n  return (\n    <div className={classes.container}>\n      <Header\n        setLevel={setLevel}\n        setSize={setSize}\n        onCheckBoard={onCheckBoard}\n      />\n      <SudokuBoard\n        size={size}\n        showSolved={showSolved}\n        solvedBoard={solvedBoard}\n        empty={empty}\n        board={board}\n        setBoard={setBoard}\n      />\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { ChangeEvent, Component, Dispatch } from 'react';\nimport classes from './start.module.scss';\n\nimport Select from 'react-select';\nimport { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst levelOptions: ISelectOption[] = [\n  { value: '0', label: 'Easy' },\n  { value: '1', label: 'Medium' },\n  { value: '2', label: 'Hard' },\n];\n\nconst boardSizeOptions: ISelectOption[] = [\n  { value: '9', label: '9 x 9' },\n  { value: '16', label: '16 x 16' },\n];\n\ninterface ISelectOption {\n  value: string;\n  label: string;\n}\n\ninterface Props {\n  onCreateTable: () => void;\n  level: ISelectOption | null;\n  size: ISelectOption | null;\n  setLevel: Dispatch<any>;\n  setSize: Dispatch<any>;\n}\n\nconst Start = ({ onCreateTable, level, size, setLevel, setSize }: Props) => {\n  const [redirect, setRedirect] = useState(false);\n\n  const onStartGame = () => {\n    if (!level || !size) {\n      return;\n    }\n\n    onCreateTable();\n    setRedirect(true);\n  };\n\n  if (redirect) {\n    return <Redirect to={'/game'} />;\n  }\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.wrapper}>\n        <div className={classes.text}>\n          <div>Welcome to Sudoku game.</div>\n          <div>Please, choose a level and a board size.</div>\n        </div>\n        <div className={classes.selectWrapper}>\n          <Select\n            value={level}\n            onChange={(selectedOption) => setLevel(selectedOption)}\n            className={classes.select}\n            placeholder='Level'\n            options={levelOptions}\n          />\n          <Select\n            value={size}\n            onChange={(selectedOption) => setSize(selectedOption)}\n            className={classes.select}\n            placeholder='Size'\n            options={boardSizeOptions}\n          />\n        </div>\n\n        <button onClick={onStartGame} className={classes.startButton}>\n          Start\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Start;\n","export class SudokuGame {\n  board: Array<Array<string>>;\n  solvedBoard: Array<Array<string>> | null = null;\n  numberOfCells: number;\n  numberOfFilledCells: number = 0;\n  level: string;\n  box: number;\n\n  constructor(\n    board: Array<Array<string>>,\n    numberOfCells: number,\n    box: number,\n    level: string\n  ) {\n    this.board = board;\n    this.numberOfCells = numberOfCells;\n    this.box = box;\n    this.level = level;\n  }\n\n  play() {\n    if (this.level === 'Easy' || !this.level) {\n      this.numberOfFilledCells =\n        Math.round(Math.pow(this.numberOfCells, 2) / 3) * 2;\n    } else if (this.level === 'Medium') {\n      this.numberOfFilledCells = Math.round(\n        Math.pow(this.numberOfCells, 2) / 2\n      );\n    } else {\n      this.numberOfFilledCells = Math.round(\n        Math.pow(this.numberOfCells, 2) / 3\n      );\n    }\n\n    const newBoard = this.generateRandom();\n\n    this.solve(newBoard);\n\n    const solvedBoard = [\n      ...newBoard.map((item) => {\n        return [...item.map((el) => el)];\n      }),\n    ];\n\n    this.solvedBoard = solvedBoard;\n    this.board = newBoard;\n\n    const generatedBoard = this.fillWithEmpty();\n\n    return [solvedBoard, generatedBoard];\n  }\n\n  shuffle(arr: Array<number>) {\n    for (let i = 0; i < arr.length; i++) {\n      const randomIndex = Math.round(Math.random() * 8);\n      const temp = arr[i];\n      arr[i] = arr[randomIndex];\n      arr[randomIndex] = temp;\n    }\n\n    return arr;\n  }\n\n  generateRandom() {\n    const newBoard = [\n      ...this.board.map((item) => {\n        return [...item.map((el) => el)];\n      }),\n    ];\n\n    const numToFill = [];\n\n    for (let num = 1; num <= this.numberOfCells; num++) {\n      numToFill.push(num);\n    }\n\n    const shuffledArr = this.shuffle(numToFill);\n\n    for (let i = 0; i < shuffledArr.length; i++) {\n      if (i === 0) {\n        console.log();\n\n        newBoard[0][0] = shuffledArr[i].toString();\n      } else {\n        const [y, x] = this.generateRandomCell();\n        newBoard[y][x] = shuffledArr[i].toString();\n      }\n    }\n\n    return newBoard;\n  }\n\n  generateRandomCell() {\n    const y = Math.round(Math.random() * (this.numberOfCells - 1));\n    const x = Math.round(Math.random() * (this.numberOfCells - 1));\n\n    return [y, x];\n  }\n\n  fillWithEmpty() {\n    for (\n      let i = 1;\n      i <= Math.pow(this.board.length, 2) - this.numberOfFilledCells;\n      i++\n    ) {\n      const [y, x] = this.generateRandomCell();\n      if (this.board[y][x] === '-' && this.box !== 2) {\n        --i;\n      }\n\n      this.board[y][x] = '-';\n    }\n\n    return this.board;\n  }\n\n  solve(board: Array<Array<string>>) {\n    for (let y = 0; y < this.numberOfCells; y++) {\n      for (let x = 0; x < this.numberOfCells; x++) {\n        const currPos = board[y][x];\n\n        if (currPos === '-') {\n          for (let num = 1; num <= this.numberOfCells; num++) {\n            const currentNum = num.toString();\n            const isValid = this.validateTable(board, [y, x], currentNum);\n\n            if (isValid) {\n              board[y][x] = currentNum;\n\n              if (this.solve(board)) {\n                return board;\n              } else {\n                board[y][x] = '-';\n              }\n            }\n          }\n          return false;\n        }\n      }\n    }\n    return board;\n  }\n\n  validateTable(board: Array<Array<string>>, pos: Array<number>, num: string) {\n    const [y, x] = pos;\n\n    // check y-coordinate\n    for (let i = 0; i < this.numberOfCells; i++) {\n      if (board[i][x] === num && i !== y) {\n        return false;\n      }\n    }\n\n    // check x-coordinates\n    for (let j = 0; j < this.numberOfCells; j++) {\n      if (board[y][j] === num && j !== x) {\n        return false;\n      }\n    }\n\n    // check box\n    const boxRow = Math.floor(y / this.box) * this.box;\n    const boxCol = Math.floor(x / this.box) * this.box;\n\n    for (let i = boxRow; i < this.box + boxRow; i++) {\n      for (let j = boxCol; j < this.box + boxCol; j++) {\n        if (board[i][j] === num && i !== y && j !== x) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Main from './pages/main/main';\nimport Start from './pages/start/start';\nimport './index.scss';\nimport { SudokuGame } from './utils/game';\nimport { useState } from 'react';\n\nexport interface ISelectOption {\n  value: string;\n  label: string;\n}\n\nconst App = () => {\n  const [game, setGame] = useState<SudokuGame | null>(null);\n  const [board, setBoard] = useState<Array<Array<string>>>(\n    new Array(9).fill(undefined).map(() => {\n      return new Array(9).fill('-');\n    })\n  );\n  const [solvedBoard, setSolvedBoard] = useState<Array<Array<string>> | null>(\n    null\n  );\n  const [empty, setEmpty] = useState<Array<string> | null>(null);\n  const [level, setLevel] = useState<ISelectOption | null>(null);\n  const [size, setSize] = useState<ISelectOption | null>(null);\n\n  const onCreateTable = () => {\n    if (!size || !level) return;\n\n    const newBoard: Array<Array<string>> = new Array(+size?.value)\n      .fill(undefined)\n      .map(() => {\n        return new Array(+size?.value).fill('-');\n      });\n\n    const sudoku = new SudokuGame(\n      newBoard,\n      +size.value,\n      Math.sqrt(+size.value),\n      level.label\n    );\n    setGame(sudoku);\n\n    const result = sudoku.play();\n    const emptyIndexes: any = [];\n\n    result[1].forEach((item, y) => {\n      item.forEach((el: any, x: number) => {\n        if (el === '-') {\n          emptyIndexes.push(`${y}, ${x}`);\n        }\n      });\n    });\n\n    setEmpty(emptyIndexes);\n    setSolvedBoard(result[0]);\n    setBoard(result[1]);\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/'>\n          <Start\n            level={level}\n            setLevel={setLevel}\n            setSize={setSize}\n            size={size}\n            onCreateTable={onCreateTable}\n          />\n        </Route>\n        <Route exact path='/game'>\n          <Main\n            size={size}\n            setLevel={setLevel}\n            setSize={setSize}\n            setBoard={setBoard}\n            empty={empty}\n            solvedBoard={solvedBoard}\n            board={board}\n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}